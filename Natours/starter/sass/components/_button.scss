.btn {
    &,
    &:link,
    &:visited {
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.5rem 4rem;
        display: inline-block;
        border-radius: 10rem; /* Round corners on button */
        transition: all .2s; /* Determine time for all actions effect (hover, active, etc), must be on initial state (link in this case) */
        position: relative;
        font-size: $default-font-size;

        // Change for the <button> element
        border: none;
        cursor: pointer;
    }
    
    &:hover {
        transform: translateY(-0.3rem);
        box-shadow: 0 1rem 2rem rgba($color-black,.2); /* X Y BLUR COLOR */

        &::after {
            transform: scaleX(1.4) scaleY(1.6);
            opacity: 0;
        }
    }
    
    &:active,
    &:focus {
        outline: none;
        transform: translateY(-0.1rem);
        box-shadow: 0 0.5rem 1rem rgba($color-black,.2); /* X Y BLUR COLOR */
    }
    
    &--white {
        background-color: $color-white;
        color: $color-grey-dark;

        &::after {
            background-color: $color-white;
        }
    }

    &--green {
        background-color: $color-primary;
        color: $color-white;

        &::after {
            background-color: $color-primary;
        }
    }
    
    &::after {
        content: ""; /* must specify or won't appear*/
        display: inline-block;
        height: 100%;
        width: 100%;
        border-radius: 10rem;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        transition: all 0.4s;
    }
    
    &--animated {
        animation: moveInBottom 0.5s ease-out .75s; 
        animation-fill-mode: backwards; /* set element to animation initial state until end of delay is reached (.75s in this case) */
    }
}

.btn-text {
    &:link,
    &:visited {
        font-size: $default-font-size;
        color: $color-primary;
        display: inline-block;
        text-decoration: none;
        border-bottom: 1px solid $color-primary;
        padding: 3px; // When small values like 1px or 3px, it's ok to not use rem cause it will probably translate to the same value
        transition: all .2s;
    }

    &:hover {
        background-color: $color-primary;
        color: $color-white;
        box-shadow: 0 1rem 2rem rgba($color-black, 0.15);
        transform: translateY(-2px);
    }

    &:active {
        box-shadow: 0 .5rem 1rem rgba($color-black, 0.15);
        transform: translateY(0);
    }
}